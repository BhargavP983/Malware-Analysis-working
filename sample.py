import json
import yara
import hashlib
import pefile


def extract_pe_features(file_path):
    features = {}
    try:
        pe = pefile.PE(file_path)

        # Extracting PE file properties
        features['machine'] = pe.FILE_HEADER.Machine
        features['number_of_sections'] = len(pe.sections)
        features['entry_point'] = hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)
        features['magic'] = hex(pe.DOS_HEADER.e_magic)

    except Exception as e:
        print(f"Error extracting PE features: {e}")

    return features


def compare_with_yara(file_path, yara_rules):
    matches = []
    try:
        # Load YARA rules
        compiled_rules = yara.compile(source=yara_rules)

        # Extract features from the PE file
        pe_features = extract_pe_features(file_path)

        # Convert each feature dictionary to a string
        features_str = [json.dumps(feature) for feature in pe_features]

        # Join the features into a single string
        features_joined = '\n'.join(features_str)
        print(features_joined)
        # Match the features data with YARA rules
        matches_tmp = compiled_rules.match(data=features_joined)

        if matches_tmp:
            matches.extend([match.rule for match in matches_tmp])

    except Exception as e:
        print(f"Error during YARA matching: {e}")

    return matches


# Input file path
filepath = r"C:\Users\Admin\PycharmProjects\Malware_Analsysis\Executables\python310.exe"

# YARA rule for detecting executables
yara_rules = """
rule detect_executable {
    condition:
        // Check for PE header magic
        uint16(0) == 0x5a4d
}
"""

# Compare with YARA rules
matched_rules = compare_with_yara(filepath, yara_rules)
if matched_rules:
    print(f"Matched YARA Rules: {', '.join(matched_rules)}")
    print("**WARNING: Potential executable detected**")
else:
    print("No YARA rule matches found.")


