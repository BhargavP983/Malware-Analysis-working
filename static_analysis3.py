import os
import magic
import hashlib
from pefile import PE
import string
import json
import lief

def static_analysis(folder_path):
    results = []
    try:
        result = {}
        with open(folder_path, 'rb') as f:
                file_data = f.read()
                filesize = len(file_data)
                filehash = hashlib.sha256(file_data).hexdigest()

                # Determining file type
                ftype = magic.from_file(folder_path, mime=True)
                result["file_type"] = ftype

                # calculate File size
                result["filesize"] = filesize

                # File Hash
                result["sha256"] = filehash

                if ftype.startswith("application/x-dosexec") or ftype.startswith("application/x-ms-dos-executable"):
                    try:
                        pe = PE(data=file_data)
                        result["machine"] = hex(pe.FILE_HEADER.Machine)
                        result["magic"] = hex(pe.OPTIONAL_HEADER.Magic)

                        # Additional features extracted for PE files
                        result["number_of_sections"] = pe.FILE_HEADER.NumberOfSections
                        result["entry_point"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint

                        # Extracting imports
                        imports = []
                        for entry in pe.DIRECTORY_ENTRY_IMPORT:
                            for imp in entry.imports:
                                if imp.name:
                                    imports.append(imp.name.decode())
                        result["imports"] = imports

                        # Extracting exports
                        exports = []
                        if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
                            for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                                exports.append(exp.name.decode())
                        result["exports"] = exports

                        sections = []
                        for section in pe.sections:
                            sections.append({
                                "name": section.Name.decode().strip('\x00'),
                                "virtual_address": hex(section.VirtualAddress),
                                "virtual_size": hex(section.Misc_VirtualSize),
                                "raw_size": hex(section.SizeOfRawData),
                                "entropy": section.get_entropy()
                            })
                        result["sections"] = sections

                    except Exception as e:
                        print(f"Error analyzing : {e}")
                elif ftype.startswith("application/x-executable"):
                    try:
                        # Open the binary with LIEF
                        binary = lief.parse(file_data)

                        # Extract header information
                        result["architecture"] = str(binary.header.architecture)
                        result["entrypoint"] = hex(binary.entrypoint)
                        result["format"] = binary.header.format

                        # Extract sections information
                        sections = []
                        for section in binary.sections:
                            sections.append({
                                "name": section.name,
                                "virtual_address": hex(section.virtual_address),
                                "size": hex(section.size),
                                "entropy": section.entropy
                            })
                        result["sections"] = sections

                        # Extract imported functions
                        imported_functions = []
                        if binary.imports:
                            for lib in binary.imports:
                                for imp in lib.entries:
                                    imported_functions.append(imp.name)
                        result["imported_functions"] = imported_functions

                        # Additional features for other types of executables
                        # Extracting strings from executable
                        strings = []
                        for c in string.printable:
                            substr = bytes(c, 'ascii')
                            if substr in file_data:
                                strings.append(c)
                        result["strings"] = strings
                    except Exception as e:
                        print(f"Error analyzing : {e}")
                results.append(result)
    except Exception as a:
        print(a)
    return results

folder_path = "Executables/npp.8.4.6.Installer.x64.exe"
new = static_analysis(folder_path)
print(new)