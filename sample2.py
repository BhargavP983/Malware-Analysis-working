import os
import pefile
import yara
import requests
import json


# Function to extract features from a PE file using pefile
def extract_features(file_path):
    pe = pefile.PE(file_path)
    features = []

    # Extract imports
    imports = []
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        for imp in entry.imports:
            if imp.name:
                imports.append(imp.name.decode())
            else:
                imports.append(entry.dll.decode())
    features.extend(imports)

    # Extract exports
    exports = []
    if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
        for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
            if exp.name:
                exports.append(exp.name.decode())
    features.extend(exports)

    # Extract sections
    sections = [{
        "name": section.Name.decode().strip('\x00'),
        "virtual_address": hex(section.VirtualAddress),
        "virtual_size": hex(section.Misc_VirtualSize),
        "raw_size": hex(section.SizeOfRawData),
        "entropy": section.get_entropy()
    } for section in pe.sections]
    features.extend(sections)

    # Extract resources
    resources = [{
        "type": resource_type.name.decode() if resource_type.name else None,
        "id": resource_id.name.decode() if resource_id.name else None,
        "language": resource_lang.name.decode() if resource_lang.name else None
    } for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries
                for resource_id in resource_type.directory.entries
                if hasattr(resource_id, 'directory')
                for resource_lang in resource_id.directory.entries]
    features.extend(resources)

    return features


# Function to compare extracted features against YARA rules
def compare_with_yara(features, yara_rules):
    matches = []

    # Convert each feature dictionary to a string
    features_str = [json.dumps(feature) for feature in features]

    # Join the features into a single string
    features_joined = '\n'.join(features_str)

    # Match the features against YARA rules
    for rule in yara_rules.match(data=features_joined):
        matches.append(rule.rule)
    return matches

# Main function to orchestrate the workflow
def main(file_path, yara_rules_directory):
    # Extract features from the file
    features = extract_features(file_path)

    # Load predefined YARA rules
    yara_rules = yara.compile(filepath='index.yar')

    # Compare features with YARA rules
    yara_matches = compare_with_yara(features, yara_rules)
    print("YARA rule matched:", yara_matches)


if __name__ == "__main__":
    file_path = r"Executables/python310.exe"
    yara_rules_directory = r"rules"
    main(file_path, yara_rules_directory)
